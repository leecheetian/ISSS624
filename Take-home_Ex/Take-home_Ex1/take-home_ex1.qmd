---
title: "Take-home Exercise 1"
author: "Lee Chee Tian"
editor: visual
---

# Geospatial Analytics for Social Good

## Objective

To reveal the geospatial patterns of Functional and Non-functional water points in Nigeria using global and local spatial association techniques.

## Loading R Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, funModeling)
```

## Importing Data into R

### The Data

ESRI shapefile data of Nigeria showing Level-2 Administrative (or Local Government Area, LGA) boundary was obtained from geoBoundaries:

![](nigeria%20adm2%20geospatial%20data.jpg)

Water point data in CSV format was obtained from WPdx data repository:

![](nigeria%20aspatial%20data.jpg)

As the size of the CSV file has exceeded the GitHub limitation of 100 MB, it shall not be included in the Commit and Push to GitHub and Netlify. The wrangled data derived from the following steps for the subsequent geospatial analysis will be exported as a RDS file, and this will be pushed to GitHub and Netlify instead.

### Importing Nigeria Shapefile

```{r}
nigeria_sf <- st_read(dsn="data/Nigeria", layer="geoBoundaries-NGA-ADM2")
```

```{r}
plot(nigeria_sf)
```

```{r}
glimpse(nigeria_sf)
```

#### Transforming to EPSG 26391 Map Projection

```{r}
nigeria26391 <- st_transform(nigeria_sf, crs = 26391)
nigeria26391
```

### Importing Water Points Aspatial Data

```{r}
nigeria_csv <- read_csv("data/WPdx+/Water_Point_Data_Exchange_-_Plus__WPdx__.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

#### Converting to simple feature data frame and transforming to same map projection

```{r}
nigeria_wp_sf <- st_as_sf(nigeria_csv, 
                          coords = c("#lon_deg", "#lat_deg"),
                          crs = 4326) %>%
  st_transform(crs = 26391)
```

## Data Wrangling

### Recoding NA values into string

Recoding all NA values in *#status_clean* column into "Unknown":

```{r}
nigeria_wp <- nigeria_wp_sf %>%
  mutate(`#status_clean` = replace_na(`#status_clean`, "Unknown"))
```

### EDA

Listing all values in *#status_clean* column:

```{r}
freq(data = nigeria_wp, input = "#status_clean")
```

## Extracting Water Points Data

### Extracting functional water points

```{r}
wp_functional <- nigeria_wp %>%
  filter(`#status_clean` %in% c("Functional", 
                                "Functional but needs repair",
                                "Functional but not in use"))
```

### Extracting non-functional water points

```{r}
wp_nonfunctional <- nigeria_wp %>%
  filter(`#status_clean` %in% c("Non-Functional", 
                                "Non-Functional due to dry season",
                                "Non functional due to dry season",
                                "Abandoned/Decommissioned",
                                "Abandoned"))
```

### Extracting water points with Unknown class

```{r}
wp_unknown <- nigeria_wp %>%
  filter(`#status_clean` == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
wp_nigeria <- nigeria26391 %>% 
  mutate(`Total water points` = lengths(
    st_intersects(nigeria26391, nigeria_wp))) %>%
  mutate(`Functional status` = lengths(
    st_intersects(nigeria26391, wp_functional))) %>%
  mutate(`Non-functional status` = lengths(
    st_intersects(nigeria26391, wp_nonfunctional))) %>%
  mutate(`Unknown status` = lengths(
    st_intersects(nigeria26391, wp_unknown))) %>%
  mutate(`Functional %` = `Functional status` / `Total water points`) %>%
  mutate(`Non-functional %` = `Non-functional status` / `Total water points`)
```

```{r}
wp_nigeria
```

## Saving the Analytical Data Table

The data derived above is saved as a RDS file for subsequent geospatial analysis of the water points:

```{r}
write_rds(wp_nigeria, "data/rds/wp_nigeria.rds")
```

## Visualizing the Spatial Distribution of Water Points

```{r}
#| fig-width: 14
#| fig-height: 12
wp_nigeria <- read_rds("data/rds/wp_nigeria.rds")
total <- qtm(wp_nigeria, "Total water points", fill.palette = "Purples") + 
  tm_layout(legend.outside = TRUE)
wp_functional <- qtm(wp_nigeria, "Functional status", fill.palette = "Blues") + 
  tm_layout(legend.outside = TRUE)
wp_nonfunctional <- qtm(wp_nigeria, "Non-functional status", fill.palette = "Oranges") + 
  tm_layout(legend.outside = TRUE)
unknown <- qtm(wp_nigeria, "Unknown status", fill.palette = "Greys") + 
  tm_layout(legend.outside = TRUE)
pct_functional <- qtm(wp_nigeria, "Functional %", fill.palette = "Blues") + 
  tm_layout(legend.outside = TRUE, legend.format = list(fun=function(x) paste0(formatC(x * 100, digits=0, format="f"), " %")))
pct_nonfunctional <- qtm(wp_nigeria, "Non-functional %", fill.palette = "Oranges") + 
  tm_layout(legend.outside = TRUE, legend.format = list(fun=function(x) paste0(formatC(x * 100, digits=0, format="f"), " %")))

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, pct_functional, pct_nonfunctional, ncol=2)
```

From the above maps, it appears that the northern regions of Nigeria tend to enjoy both a higher count as well as percentage of functional water points, while the central and southern regions suffer a higher count and percentage of non-functional ones.

## Cluster and Outlier Analysis

### Computing Contiguity Spatial Weights

```{r}
wm_q <- poly2nb(wp_nigeria, queen = TRUE)
summary(wm_q)
```

### Row-Standardized Weights Matrix

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
print(rswm_q, zero.policy = TRUE)
```

### Global Spatial Autocorrelation: Moran's I test

```{r}
moran.test(wp_nigeria$`Functional %`, 
           listw = rswm_q, 
           zero.policy = TRUE, 
           na.action = na.omit)
```

The positive Moran's I value of 0.5546 and low p-value of \< 0.05 suggest that there is clustering and positive spatial autocorrelation of the proportion of functional water points among the LGAs, and the null hypothesis of spatial randomness is rejected.

### Computing Local Moran's I

```{r}
fips <- order(wp_nigeria$shapeName)
localMI <- localmoran(wp_nigeria$`Functional %`, rswm_q, zero.policy = TRUE,
                      na.action = na.exclude)
head(localMI)
```

```{r}
printCoefmat(data.frame(localMI[fips,], 
                        row.names = wp_nigeria$shapeName[fips]), 
             check.names = FALSE)
```
