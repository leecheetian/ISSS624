---
title: "Hands-on Exercise 3"
author: "Lee Chee Tian"
editor: visual
---

# Geographical Segmentation with Spatially Constrained Clustering Techniques

## Overview

This hands-on exercise demonstrates how homogeneous regions can be carved out using geographically referenced multivariate data. The two main types of analysis that are performed for this purpose are:

-   hierarchical cluster analysis
-   spatially constrained cluster analysis

## Getting Started

### The Analytical Problem

To delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication Technology (ICT) measures, namely: Radio, Television, Land Line Phone, Mobile Phone, Computer, and Internet at home.

### The Data

#### ![](geospatial%20screen.jpg)

![](aspatial%20screen.jpg)

### Installing and Loading R Packages

The R packages needed for this hands-on exercise include:

-   Spatial data handling
    -   **sf**, **rgdal** and **spdep**
-   Attribute data handling
    -   **tidyverse**, especially **readr**, **ggplot2** and **dplyr**
-   Choropleth mapping
    -   **tmap**
-   Multivariate data visualization and analysis
    -   **coorplot**, **ggpubr**, and **heatmaply**
-   Cluster analysis
    -   **cluster**
    -   **ClustGeo**

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, ggpubr, cluster, 
               factoextra, NbClust, heatmaply, corrplot, 
               psych, tidyverse)
```

## Data Import and Prepatation

### Importing geospatial data into R environment

```{r}
shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)"))
```

```{r}
shan_sf
```

```{r}
glimpse(shan_sf)
```

### Importing aspatial data into R environment

```{r}
ict <- read_csv ("data/aspatial/Shan-ICT.csv")
```

```{r}
summary(ict)
```

### Deriving new variables using *dplyr* package

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
```

```{r}
summary(ict_derived)
```

## Exploratory Data Analysis (EDA)

### EDA using statistical graphics

#### Histogram showing distribution of radio-owning household counts across townships

```{r}
ggplot(data = ict_derived, 
       aes(x = `RADIO`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")
```

#### Boxplot showing outliers in household counts

```{r}
ggplot(data = ict_derived, 
       aes(x = `RADIO`)) +
  geom_boxplot(color = "black", 
               fill = "light blue")
```

#### Histogram showing distribution of radio penetration rate across townships

```{r}
ggplot(data = ict_derived, 
       aes(x = `RADIO_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")
```

#### Boxplot showing outlier in radio penetration rate

```{r}
ggplot(data = ict_derived, 
       aes(x = `RADIO_PR`)) +
  geom_boxplot(color = "black", 
               fill = "light blue")
```

The above histograms and boxplots show that the distribution of the absolute counts of radio-owning households is heavily skewed to the left, with some outliers to the far right, a result likely due to the uneven size and population of the various townships, with most numbered around 2,500 figure, and only a few rare ones that are sized above 10,000, forming those outliers.

But when the radio penetration is calculated as a factor of the township population, the resultant distribution appears more even and approaches a normal spread. The number of outliers has also reduced to just 1 from the earlier count of 3.

#### Distribution of various ICT penetration rates across townships

```{r}
radio <- ggplot(data = ict_derived, 
             aes(x = `RADIO_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")

tv <- ggplot(data = ict_derived, 
             aes(x = `TV_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")

llphone <- ggplot(data = ict_derived, 
             aes(x = `LLPHONE_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")

mphone <- ggplot(data = ict_derived, 
             aes(x = `MPHONE_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")

computer <- ggplot(data = ict_derived, 
             aes(x = `COMPUTER_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")

internet <- ggplot(data = ict_derived, 
             aes(x = `INTERNET_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")
```

```{r}
ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

It appears that radios, TVs and mobile phones are more normally distributed among households across townships, suggesting more common ownership of these items by households, while land line phones, computers and internet are heavily left-skewed and thus less commonly owned.

### EDA using choropleth map

#### Joining geospatial data with aspatial data

```{r}
shan_sf <- left_join(shan_sf, 
                     ict_derived, 
                     by = c("TS_PCODE" = "TS_PCODE"))
```

#### Preparing a choropleth map

Plotting choropleth map showing the distribution of radio penetration rate across townships in Shan State:

```{r}
qtm(shan_sf, "RADIO_PR")
```

Plotting choropleth map showing the distribution of radio-owning household counts across townships. It is observed that these counts distribution mostly coincide with the townships' total household counts distribution:

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks", 
          title = "Total households") + 
  tm_borders(alpha = 0.5) 

RADIO.map <- tm_shape(shan_sf) + 
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Number Radio ") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp = NA, ncol = 2)
```

However, when plotted as penetration rate instead of as actual count, it reveals that the distribution may not necessarily be in line with the townships' total household counts distribution. Some townships with lower number of households may actually have higher radio penetration rate than townships with higher number of households, and vice versa:

```{r}
tm_shape(shan_sf) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style = "jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom")) +
  tm_layout(outer.margins = 0, asp = 0)
```

## Correlation Analysis

To eliminate cluster variables that are highly correlated, so that they do not combine and overweight one aspect in the subsequent cluster analysis process:

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The COMPUTER_PR and INTERNET_PR variables are found to be highly correlated (correlation coefficient \> 0.85), hence only one of them should be used in the subsequent cluster analysis step. COMPUTER_PR will be retained while INTERNET_PR will be dropped.

## Hierarchy Cluster Analysis

### Extrating cluster variables

Extracting cluster variables from the *shan_sf* simple feature object into data.frame:

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars, 10)
```

Changing the rows by township name instead of row number:

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars, 10)
```

Deleting the TS.x column:

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

### Data Standardization

To standardize the value ranges of the various clustering variables so that the cluster analysis result will not end up being biased to those with large values.

#### Min-Max standardization

Min-Max standardization of clustering variables using *normalize()* function of **heatmaply** package:

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

All clustering variables are standardized to value ranges between 0 and 1.

#### Z-score standardization

Z-score standardization of clustering variables using *scale()* function in R:

```{r}
shan_ict.z <- scale(shan_ict)
describe(shan_ict.z)
```

Mean and standard deviation of all clustering variables are standardized to 0 and 1 respectively.

### Visualizing the standardized cluster variables

Visualizing the effect of standardization on the RADIO_PR variable:

```{r}
r <- ggplot(data = ict_derived, 
             aes(x = `RADIO_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data = shan_ict_s_df, 
       aes(x = `RADIO_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue") +
  ggtitle("Min-Max Standardization") +
  theme(plot.title = element_text(size = 10.5))

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data = shan_ict_z_df, 
       aes(x = `RADIO_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue") +
  ggtitle("Z-score Standardization") +
  theme(plot.title = element_text(size = 10.5))

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

### Computing proximity matrix

Calculating distance matrix with euclidean method using *dist()* function in R:

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
proxmat
```

### Computing hierarchical clustering

Performing hierarchical cluster analysis with ward.D method using *hclust()* function in R:

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

```{r}
plot(hclust_ward, cex = 0.6)
```

### Selecting the optimal clustering algorithm

Finding the agglomerative coefficients of all hierarchical clustering algorithms using *agnes()* function of **cluster** package:

```{r}
m <- c("average", "single", "complete", "ward")
names(m) <- c("average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

The Ward's method is found to provide the strongest clustering structure among the four methods assessed. Hence, in the subsequent clustering analysis, only this method will be used.

### Determining optimal clusters

#### Gap Statistic Method

Calculating gap statistic of various numbers of clusters using *clusGap()* function of **cluster** package:

```{r}
set.seed(12345)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

```{r}
fviz_gap_stat(gap_stat)
```

From the gap statistic graph above, disregarding the option of having a single cluster for all observations, the 6-cluster structure appears to give the largest gap statistic and therefore should be the best cluster number to pick.

### Interpreting the dendrograms

Identifying the townships that form the 6 clusters using the *rect.hclust()* function in R stats:

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

### Visually-driven hierarchical clustering analysis

Using the **heatmaply** package to build a hierarchical cluster heatmap. It can be set to either interactive or static.

#### Transforming the data frame into a matrix

Transforming the *shan_ict* data frame into a data matrix:

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

#### Plotting interactive cluster heatmap using *heatmaply()*

Using the *heatmaply()* function of **heatmaply** package to build an interactive cluster heatmap:

```{r}
heatmaply(normalize(shan_ict_mat),
          Colv = NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main = "Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### Mapping the clusters formed

Using the *cutree()* function in R to derive a 6-cluster model:

```{r}
groups <- as.factor(cutree(hclust_ward, k = 6))
```

Converting *groups* list object into matrix, and appending to *shan_sf* simple feature object using *cbind()* function:

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

Using the *qtm()* function of **tmap** package to plot choropleth map showing the 6 clusters formed:

```{r}
qtm(shan_sf_cluster, "CLUSTER")
```

The clusters formed in the choropleth map above appear very fragmented. This is because the hierarchical cluster analysis method used does not take into consideration spatial constraints when performing clustering of the townships.

## Spatially Constrained Clustering - SKATER approach

Using the *skater()* method of **spdep** package to derive spatially constrained clusters.

### Converting into SpatialPolygonsDataFrame

Using the *as_Spatial()* function of **sf** package to convert *shan_sf* into a SpatialPolygonDataFrame object:

```{r}
shan_sp <- as_Spatial(shan_sf)
```

### Computing neighbour list

Using the *poly2nb()* function of **spdep** package to compute the neighbours list from the polygon list:

```{r}
shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

Plotting the neighbours list on top of the Shan State township boundaries map:

```{r}
plot(shan_sp, 
     border=grey(.5))

plot(shan.nb, 
     coordinates(shan_sp), 
     col = "blue", 
     add = TRUE)
```

### Computing minimum spanning tree

#### Calculating edge costs

Using the *nbcosts()* function of **spdep** package to calculate the cost of each edge, ie. the distance between its nodes:

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

Deriving weights list from the above costs using the *nb2listw()* function of **spdep** package:

```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style = "B")
summary(shan.w)
```

#### Computing minimum spanning tree

Deriving the minimum spanning tree using the *mstree()* function of **spdep** package:

```{r}
shan.mst <- mstree(shan.w)
```

Checking the class, dimension and content of the minimum spanning tree object:

```{r}
class(shan.mst)
```

```{r}
dim(shan.mst)
```

```{r}
head(shan.mst)
```

Plotting the minimum spanning tree over the township boundaries map:

```{r}
plot(shan_sp, border = gray(.5))

plot.mst(shan.mst, 
         coordinates(shan_sp), 
         col = "blue", 
         cex.lab = 0.7, 
         cex.circles = 0.005, 
         add = TRUE)
```

The initial neighbours list from above has been simplified to just one edge connecting each of the nodes, while passing through all the nodes.

### Computing spatially constrained clusters using SKATER method

Computing the spatially constrained clusters using the *skater()* function of **spdep** package:

```{r}
clust6 <- skater(edges = shan.mst[, 1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
```

Examining the contents of the skater object:

```{r}
str(clust6)
```

Checking the cluster assignment of the townships:

```{r}
ccs6 <- clust6$groups
ccs6
```

```{r}
table(ccs6)
```

Plotting the pruned tree that shows the clusters over the township boundaries map:

```{r}
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab = 0.7,
     groups.colors = c("red", "green", "blue", "brown", "pink", "purple"),
     cex.circles = 0.005)

plot(shan_sp, border = gray(.5), add = TRUE)
```

### Visualizing the clusters in choropleth map

Plotting the spatially constrained clusters derived using SKATER in a choropleth map:

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

Comparing the hierarchical clustering and spatially constrained hierarchical clustering maps side by side:

```{r}
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp = NA, ncol = 2)
```

The spatially constrained clusters on the right appear more geographically organized than the unconstrained hierarchical clusters created earlier on the left. It will be more feasible to implement or roll out any strategies or policies to the regions on the ground physically based on the right clusters than the left ones.
