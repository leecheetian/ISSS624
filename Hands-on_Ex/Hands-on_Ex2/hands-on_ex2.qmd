---
title: "Hands-on Exercise 2"
author: "Lee Chee Tian"
editor: visual
---

# Global and Local Measures of Spatial Autocorrelation

## Overview

This hands-on exercise demonstrates how the Global and Local Measure of Spatial Autocorrelation (GLSA) is computed.

## Getting Started

### The Study Area and Data

#### ![](geospatial%20screen.jpg)

![](aspatial%20screen.jpg)

### Setting the Analytical Tools

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Getting the Data Into R Environment

### Import shapefile into R environment

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Import csv file into R environment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

```{r}
hunan <- left_join(hunan, hunan2012)
```

### Visualizing Regional Development Indicator

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp = 1, 
             ncol = 2)
```

## Global Spatial Autocorrelation

### Computing Contiguity Spatial Weights

```{r}
wm_q <- poly2nb(hunan, 
                queen = TRUE)
summary(wm_q)
```

### Row-standardised weights matrix

```{r}
rswm_q <- nb2listw(wm_q, 
                   style = "W", 
                   zero.policy = TRUE)
rswm_q
```

### Global Spatial Autocorrelation: Moran's I

#### Maron's I test

```{r}
moran.test(hunan$GDPPC, 
           listw = rswm_q, 
           zero.policy = TRUE, 
           na.action = na.omit)
```

The positive Moran I value of 0.3007 and low p-value of \< 0.05 suggest that there is clustering and positive spatial autocorrelation of GDPPC among the counties, and the null hypothesis of spatial randomness is rejected.

#### Computing Monte Carlo Moran's I

```{r}
set.seed(1234)
bperm = moran.mc(hunan$GDPPC, 
                listw = rswm_q, 
                nsim = 999, 
                zero.policy = TRUE, 
                na.action = na.omit)
bperm
```

The positive Moran I and low p-value of 0.001 after 1000 simulations affirm the clustering and positive spatial autocorrelation that's present in the various counties' GDPPC.

#### Visualizing Monte Carlo Moran's I

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq = TRUE, 
     breaks = 20, 
     xlab = "Simulated Moran's I")
abline(v = 0, 
       col = "red") 
```

The above summary and histogram show that in order for the null hypothesis (spatial randomness) to stand, the Moran I should be close to the median value of -0.02125. Our obtained Moran I value of 0.3007 lies way outside the confidence interval of the histogram, and thus the null hypothesis can be rejected.

```{r}
ggplot(data = data.frame(bperm$res),
       aes(x = bperm$res)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue") +
  labs(title = "Histogram by ggplot",
      x = "Simulated Moran's I",
      y = "Frequency") +
  geom_vline(aes(xintercept = 0), col = "red")
```

### Global Spatial Autocorrelation: Geary's

#### Geary's C test

```{r}
geary.test(hunan$GDPPC, listw = rswm_q)
```

The Geary C value of 0.6907 is less than 1, thus suggesting that clustering and spatial autocorrelation of GDPPC exist. The low p-value that is \< 0.05 means that the null hypothesis of spatial randomness can be rejected.

#### Computing Monte Carlo Geary's C

```{r}
set.seed(1234)
bperm = geary.mc(hunan$GDPPC, listw = rswm_q, nsim = 999)
bperm
```

The \< 1 value of Geary C and low p-value of 0.001 after 1000 simulations affirm the clustering and positive spatial autocorrelation that's present in the various counties' GDPPC.

#### Visualising the Monte Carlo Geary's C

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab = "Simulated Geary c")
abline(v = 1, col = "red") 
```

The above summary and histogram show that in order for the null hypothesis (spatial randomness) to stand, the Geary C should be close to the median value of 1.0052. Our obtained Geary C value of 0.6907 lies below the confidence interval of the histogram, and thus the null hypothesis can be rejected.

## Spatial Correlogram

### Compute Moran's I correlogram

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order = 6, 
                          method = "I", 
                          style = "W")
plot(MI_corr)
```

```{r}
print(MI_corr)
```

The plot above shows that there exists positive spatial autocorrelation in GDPPC among counties with spatial lag order of 1 and 2, and negative spatial autocorrelation among counties with lag order of 5 and 6, with high significance level (low p-value). At lag order of 3 and 4, the GDPPC appears more random with low spatial autocorrelation (Moran I approaching 0 and p-value \>= 0.05).

### Compute Geary's C correlogram and plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order = 6, 
                          method = "C", 
                          style = "W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

The plot above shows that there exists positive spatial autocorrelation in GDPPC among counties with spatial lag order of 1 and 2, and negative spatial autocorrelation among counties with lag order of 5, with high significance level (low p-value). At lag order of 3, 4 and 6, the GDPPC appears more random with low spatial autocorrelation (Geary C approaching 1 and p-value \>= 0.05).

## Cluster and Outlier Analysis

### Computing local Moran's I

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

```{r}
printCoefmat(data.frame(localMI[fips,], 
                        row.names = hunan$County[fips]), 
             check.names = FALSE)
```

#### Mapping the local Moran's I

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### Mapping local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### Mapping local Moran's I p-values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette = "-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette = "-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
 
tmap_arrange(localMI.map, pvalue.map, asp = 1, ncol = 2)
```

## Creating a LISA Cluster Map

### Plotting Moran scatterplot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels = as.character(hunan$County), 
                  xlab = "GDPPC 2012", 
                  ylab = "Spatially Lag GDPPC 2012")
```

### Plotting Moran scatterplot with standardized variable

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector
```

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels = as.character(hunan$County),
                   xlab = "z-GDPPC 2012", 
                   ylab = "Spatially Lag z-GDPPC 2012")
```

### Preparing LISA map classes

```{r}
quadrant <- vector(mode = "numeric", length = nrow(localMI))
```

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC) 
```

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])    
```

```{r}
signif <- 0.05       
```

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 2      
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 3
```

```{r}
quadrant[localMI[,5]>signif] <- 0
```

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
C_mI <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 2      
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, LISAmap, asp = 1, ncol = 2)
```

The LISA maps above help to identify the counties where there exist significant spatial autocorrelation and association in the GDPPC values with their neighbours, which form spatial clusters and outliers on the maps, thereby identifying the hot spot and cold spot areas.

## Hot Spot and Cold Spot Area Analysis

### Getis and Ord's G-Statistics

#### Deriving distance-based weight matrix

##### Deriving the centroid

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

##### Determine the cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

##### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

#### Computing adaptive distance weight matrix

```{r}
knn <- knn2nb(knearneigh(coords, k = 8))
knn
```

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing Gi statistics

### Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

### Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette = "-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp = 1, ncol = 2)
```

The Gi map above shows the hot spots which are formed by clustering of counties that have high GDPPC and have significant spatial association with neighbours that have high GDPPC too, and cold spots formed by clustering of counties that have low GDPPC and have significant spatial association with neighbours that have low GDPPC as well. The rest do not show significant spatial association for their GDPPC values with their neighbours.

### Gi statistics using adaptive distance

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette = "-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp = 1, 
             ncol = 2)
```

The Gi map above shows the hot spots and cold spots as defined earlier, but using a different distance weighting scheme - adaptive distance weighting - this time. The identified hot spots and cold spots differ from the earlier map as a result.
